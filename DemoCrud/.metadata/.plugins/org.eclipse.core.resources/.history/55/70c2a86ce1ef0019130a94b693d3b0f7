package com.example.service.impl;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.converter.UserConverter;
import com.example.entity.UserEntity;
import com.example.entity.UserRoleEntity;
import com.example.model.UserModel;
import com.example.paging.PageRequest;
import com.example.paging.Pageable;
import com.example.repository.RoleRepository;
import com.example.repository.UserRepository;
import com.example.repository.custorm.UserRepositoryCustorm;
import com.example.service.UserService;

@Service
@Transactional
public class UserServiceImpl implements UserService {
	@Autowired
	private UserRepositoryCustorm userRepositoryCustorm;
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private UserConverter converter;
	@Autowired
	private RoleRepository roleRepository;

	public List<UserModel> findAll(UserModel model) {
		Pageable pageable = new PageRequest(model.getPage(), model.getMaxPageItems());
		List<UserEntity> userEntities = userRepositoryCustorm.findAll(model, pageable);
		List<UserModel> models = new ArrayList<UserModel>();
		for (UserEntity item : userEntities) {
			models.add(converter.convertToDto(item));
		}

		return models;
	}

	public int countTotalItem(UserModel model) {

		return userRepositoryCustorm.getTotalItems(model).intValue();
	}

	public UserModel findOneById(Long id) {
		UserModel model = converter.convertToDto(userRepository.findOneById(id));
		return model;
	}

	public UserModel update(UserModel userModel, long id) {
		
		UserEntity entityOld = userRepository.findOneById(id);
		userModel.setId(id);
		userModel.setCreatedBy(entityOld.getCreatedBy());
		userModel.setCreatedDate((Timestamp) entityOld.getCreatedDate());
		UserEntity entity = converter.convertToEntity(userModel);
		entity.setUserRoleEntitys(entityOld.getUserRoleEntitys());
		
		List<UserRoleEntity> userRole = new ArrayList<UserRoleEntity>();
		UserRoleEntity roleEntity = new UserRoleEntity();
		roleEntity.setRole(roleRepository.findOne((long) 2));
		roleEntity.setUser(entity);
		userRole.add(roleEntity);
		entity.getUserRoleEntitys().clear();
		entity.getUserRoleEntitys().addAll(userRole);
		
		entity = userRepository.save(entity);
		return converter.convertToDto(entity);
	}

	public UserModel save(UserModel userModel) {
		UserEntity entity = converter.convertToEntity(userModel);
		List<UserRoleEntity> userRole = new ArrayList<UserRoleEntity>();
		UserRoleEntity roleEntity = new UserRoleEntity();
		roleEntity.setRole(roleRepository.findOne((long) 1));
		roleEntity.setUser(entity);
		userRole.add(roleEntity);
		entity.setUserRoleEntitys(userRole);
		entity = userRepository.save(entity);
		return converter.convertToDto(entity);
	}

}
